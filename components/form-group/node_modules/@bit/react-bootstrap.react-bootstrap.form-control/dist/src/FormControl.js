"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _propTypesExtra = require("prop-types-extra");

var _warning = _interopRequireDefault(require("warning"));

var _mapContextToProps = _interopRequireDefault(require("react-context-toolbox/mapContextToProps"));

var _Feedback = _interopRequireDefault(require("./Feedback"));

var _FormContext = _interopRequireDefault(require("./FormContext"));

var _ThemeProvider = require("./ThemeProvider");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var propTypes = {
  /**
   * @default {'form-control'}
   */
  bsPrefix: _propTypes.default.string,

  /**
   * The FormControl `ref` will be forwarded to the underlying input element,
   * which means unless `as` is a composite component,
   * it will be a DOM node, when resolved.
   *
   * @type {ReactRef}
   * @alias {inputRef}
   */
  ref: _propTypes.default.any,

  /**
   * Input size variants
   *
   * @type {('sm'|'lg')}
   */
  size: _propTypes.default.string,

  /**
   * The underlying HTML element to use when rendering the FormControl.
   *
   * @type {('input'|'textarea'|elementType)}
   */
  as: _propTypesExtra.elementType,

  /**
   * Render the input as plain text. Generally used along side `readOnly`.
   */
  plaintext: _propTypes.default.bool,

  /** Make the control readonly */
  readOnly: _propTypes.default.bool,

  /** Make the control disabled */
  disabled: _propTypes.default.bool,

  /**
   * The `value` attribute of underlying input
   *
   * @controllable onChange
   * */
  value: _propTypes.default.string,

  /** A callback fired when the `value` prop changes */
  onChange: _propTypes.default.func,

  /**
   * The HTML input `type`, which is only relevant if `as` is `'input'` (the default).
   */
  type: _propTypes.default.string,

  /**
   * Uses `controlId` from `<FormGroup>` if not explicitly specified.
   */
  id: _propTypes.default.string,

  /** Add "valid" validation styles to the control */
  isValid: _propTypes.default.bool,

  /** Add "invalid" validation styles to the control and accompanying label */
  isInvalid: _propTypes.default.bool
};
var defaultProps = {
  as: 'input'
};

var FormControl =
/*#__PURE__*/
function (_React$Component) {
  _inherits(FormControl, _React$Component);

  function FormControl() {
    _classCallCheck(this, FormControl);

    return _possibleConstructorReturn(this, _getPrototypeOf(FormControl).apply(this, arguments));
  }

  _createClass(FormControl, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          bsPrefix = _this$props.bsPrefix,
          type = _this$props.type,
          size = _this$props.size,
          id = _this$props.id,
          inputRef = _this$props.inputRef,
          className = _this$props.className,
          isValid = _this$props.isValid,
          isInvalid = _this$props.isInvalid,
          plaintext = _this$props.plaintext,
          readOnly = _this$props.readOnly,
          Component = _this$props.as,
          props = _objectWithoutProperties(_this$props, ["bsPrefix", "type", "size", "id", "inputRef", "className", "isValid", "isInvalid", "plaintext", "readOnly", "as"]);

      var classes;

      if (plaintext) {
        classes = _defineProperty({}, "".concat(bsPrefix, "-plaintext"), true);
      } else if (type === 'file') {
        classes = _defineProperty({}, "".concat(bsPrefix, "-file"), true);
      } else {
        var _classes3;

        classes = (_classes3 = {}, _defineProperty(_classes3, bsPrefix, true), _defineProperty(_classes3, "".concat(bsPrefix, "-").concat(size), size), _classes3);
      }

      return _react.default.createElement(Component, _extends({}, props, {
        type: type,
        id: id,
        ref: inputRef,
        readOnly: readOnly,
        className: (0, _classnames.default)(className, classes, isValid && "is-valid", isInvalid && "is-invalid")
      }));
    }
  }]);

  return FormControl;
}(_react.default.Component);

FormControl.propTypes = propTypes;
FormControl.defaultProps = defaultProps;

var mapContext = function mapContext(_ref, _ref2) {
  var controlId = _ref.controlId;
  var id = _ref2.id;
  (0, _warning.default)(controlId == null || !id, '`controlId` is ignored on `<FormControl>` when `id` is specified.');
  return {
    id: id || controlId
  };
};

var DecoratedFormControl = (0, _mapContextToProps.default)(_FormContext.default, mapContext, (0, _ThemeProvider.createBootstrapComponent)(FormControl, {
  prefix: 'form-control',
  forwardRefAs: 'inputRef'
}));
DecoratedFormControl.Feedback = _Feedback.default;
var _default = DecoratedFormControl;
exports.default = _default;

//# sourceMappingURL=FormControl.js.map